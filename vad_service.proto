// syntax = "proto3";

// package vad;

// service VADService {
//   rpc ProcessImage (ImageRequest) returns (TrajectoryResponse) {}
// }

// message ImageRequest {
//   bytes image_data = 1;
//   string encoding = 2;  // 画像のエンコーディング形式
// }

// message TrajectoryResponse {
//   repeated TrajectoryPoint trajectory = 1;
// }

// message TrajectoryPoint {
//   float x = 1;
//   float y = 2;
//   float z = 3;
// }

syntax = "proto3";

package vad;

service VADService {
  rpc ProcessData (VADRequest) returns (VADResponse) {}
}

// Request messages
message VADRequest {
  bytes image_data = 1;
  string image_encoding = 2;
  repeated Odometry ego_history = 3;
  bytes map_data = 4;
  repeated float driving_command = 5;  // one-hot vector [right, left, straight]
}

message Odometry {
  Header header = 1;
  string child_frame_id = 2;
  PoseWithCovariance pose = 3;
  TwistWithCovariance twist = 4;
}

// Response messages
message VADResponse {
  Header header = 1;
  repeated PredictedObject objects = 2;
}

message PredictedObject {
  string uuid = 1;
  float existence_probability = 2;
  repeated ObjectClassification classification = 3;
  PredictedObjectKinematics kinematics = 4;
  Shape shape = 5;
}

message ObjectClassification {
  int32 label = 1;
  float probability = 2;
}

message PredictedObjectKinematics {
  PoseWithCovariance initial_pose_with_covariance = 1;
  TwistWithCovariance initial_twist_with_covariance = 2;
  AccelWithCovariance initial_acceleration_with_covariance = 3;
  repeated PredictedPath predicted_paths = 4;
}

// Common messages
message Header {
  int64 stamp = 1;
  string frame_id = 2;
}

message PoseWithCovariance {
  Pose pose = 1;
  repeated float covariance = 2;  // 36要素の配列
}

message TwistWithCovariance {
  Twist twist = 1;
  repeated float covariance = 2;  // 36要素の配列
}

message AccelWithCovariance {
  Accel accel = 1;
  repeated float covariance = 2;  // 36要素の配列
}

message Pose {
  Point position = 1;
  Quaternion orientation = 2;
}

message Point {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Quaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message Twist {
  Vector3 linear = 1;
  Vector3 angular = 2;
}

message Accel {
  Vector3 linear = 1;
  Vector3 angular = 2;
}

message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message PredictedPath {
  repeated Pose path = 1;
  Duration time_step = 2;
  float confidence = 3;
}

message Duration {
  int32 sec = 1;
  uint32 nanosec = 2;
}

message Shape {
  float width = 1;
  float length = 2;
  float height = 3;
}